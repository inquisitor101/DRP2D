src/output_structure.cpp:33:	OutputVTKFilename = config_container->GetOutputVTKFilename();
src/output_structure.cpp:271:  // if( config_container->GetUsePML() ){
src/output_structure.cpp:274:  //   if( config_container->GetWriteAuxiliaryDataPML() ){
src/driver_structure.cpp:64:  SimTimeStart = config_container->GetSimulationStartTime();
src/driver_structure.cpp:66:  SimTimeFinal = config_container->GetSimulationFinalTime();
src/driver_structure.cpp:69:  MaxTimeIter  = config_container->GetMaxIter();
src/driver_structure.cpp:262:  switch( config_container->GetTypeSolver() ){
src/driver_structure.cpp:294:  switch( config_container->GetTypeSolver() ){
src/driver_structure.cpp:326:  switch( config_container->GetTypeSolver() ){
src/driver_structure.cpp:361:  switch( config_container->GetTypeSolver() ){
src/driver_structure.cpp:394:  switch( config_container->GetTypeIC() ){
src/driver_structure.cpp:435:	switch( config_container->GetTypeTemporalScheme() ){
src/driver_structure.cpp:486:  unsigned long OutputFreq = config_container->GetOutputFreq();
src/driver_structure.cpp:595:	switch( config_container->GetTypeSolver() ){
src/driver_structure.cpp:601:  const unsigned long WriteFreq = config_container->GetWriteFreq();
src/driver_structure.cpp:654:      if( config_container->GetAdaptTime() )
src/initial_structure.cpp:48:  x0 = config_container->GetCenterX0()[0];
src/initial_structure.cpp:49:  y0 = config_container->GetCenterX0()[1];
src/initial_structure.cpp:51:  A0 = config_container->GetDisturbanceRatio();
src/initial_structure.cpp:53:  b  = config_container->GetDisturbanceWidth();
src/initial_structure.cpp:58:  Mach   = config_container->GetMachInf();
src/initial_structure.cpp:68:  theta  = config_container->GetFlowAngle();
src/initial_structure.cpp:135:  x0 = config_container->GetCenterX0()[0];
src/initial_structure.cpp:136:  y0 = config_container->GetCenterX0()[1];
src/initial_structure.cpp:138:  A0 = config_container->GetDisturbanceRatio();
src/initial_structure.cpp:140:  Rv = config_container->GetDisturbanceWidth();
src/initial_structure.cpp:143:  Mach   = config_container->GetMachInf();
src/initial_structure.cpp:158:  theta  = config_container->GetFlowAngle();
src/temporal_structure.cpp:18:  nxNode = config_container->GetnxNode();
src/temporal_structure.cpp:20:  nyNode = config_container->GetnyNode();
src/temporal_structure.cpp:25:  MxStencil = config_container->GetmxStencil();
src/temporal_structure.cpp:26:  NxStencil = config_container->GetnxStencil();
src/temporal_structure.cpp:27:  MyStencil = config_container->GetmyStencil();
src/temporal_structure.cpp:28:  NyStencil = config_container->GetnyStencil();
src/solver_structure.cpp:56:            << DisplaySolverType( config_container->GetTypeSolver() )
src/solver_structure.cpp:66:		switch( config_container->GetTypeExternalBC(iBoundary) ){
src/solver_structure.cpp:71:        switch( config_container->GetTypeSolver() ){
src/solver_structure.cpp:221:  const as3double CFL = config_container->GetCFL();
src/solver_structure.cpp:227:    if( config_container->GetAdaptTime() )
src/solver_structure.cpp:232:    const as3double dt = config_container->GetTimeStep();
src/spatial_structure.cpp:16:  nxNode = config_container->GetnxNode();
src/spatial_structure.cpp:18:  nyNode = config_container->GetnyNode();
src/spatial_structure.cpp:23:  MxStencil = config_container->GetmxStencil();
src/spatial_structure.cpp:24:  NxStencil = config_container->GetnxStencil();
src/spatial_structure.cpp:25:  MyStencil = config_container->GetmyStencil();
src/spatial_structure.cpp:26:  NyStencil = config_container->GetnyStencil();
src/spatial_structure.cpp:122:    const unsigned short n = config_container->GetnnStencil(iDim);
src/spatial_structure.cpp:124:    const unsigned short m = config_container->GetmmStencil(iDim);
src/spatial_structure.cpp:127:    switch( config_container->GetTypeStencil(iDim) ){
src/boundary_structure.cpp:163:  unsigned long nxNode = config_container->GetnxNode();
src/boundary_structure.cpp:165:  unsigned long nyNode = config_container->GetnyNode();
src/boundary_structure.cpp:168:  unsigned short Mx = config_container->GetmxStencil();
src/boundary_structure.cpp:169:  unsigned short Nx = config_container->GetnxStencil();
src/boundary_structure.cpp:170:  unsigned short My = config_container->GetmyStencil();
src/boundary_structure.cpp:171:  unsigned short Ny = config_container->GetnyStencil();
src/geometry_structure.cpp:14:  nxNode = config_container->GetnxNode();
src/geometry_structure.cpp:16:  nyNode = config_container->GetnyNode();
src/geometry_structure.cpp:21:  nbNode   = config_container->GetNodeBufferLayer();
src/geometry_structure.cpp:23:  GridSize = config_container->GetDomainBound();
src/geometry_structure.cpp:85:  // const unsigned long nb = config_container->
